== Einleitung ==

==== Basiswissen ====

Letztes mal haben wir die folgenden Kommandos gelernt:

* @git init@
* @git add@ 
* @git commit@
* @git status@
* @git log@

Ich nehme also an das ihr diese Kommandos schon mindestens einmal verwendet
habt.

==== Fahrplan für Heute ====

* Terminologie
* Setzen von Namen und Email
* Umgang mit dem Index 
* Spezifizieren von Revisionen 
* Finden von Veränderungen 
* Arbeiten mit entfernten Repositorien 
* Veränderungen Rückgängig Machen 

== Hauptteil ==

==== Begriffe 1 ====

* Ein ''repository'' ist ein Archiv der Zustände von einem '''working tree'''
* Ein ''working tree'' ist Verzeichnis dessen Zustände in einem '''repository''' archiviert sind
* Ein ''commit'' ist ein spezifischer Zustand des '''working tree''' der im '''repository''' gespeichert ist
* Der ''index'' ist die Verbindung zwischen '''working tree''' und '''repository'''
* @HEAD@ Identifiziert den zuletzt gespeicherten '''commit''' des '''working tree''' im '''repository'''

==== Begriffe 2 ====

* Ein ''hunk'' beschreibt eine gruppe von aufeinander folgenden Veränderungen
* Ein ''branch''
* ''master'' beschreibt meist den haupt '''branch''' in einem commit
* ''Blob ''
* ''Commit ''?

==== Setzen von Namen und Email ====

Noch bevor man einen commit macht ist es wichtig folgende Einstellungen zu
Machen:

* git config user.name "Valentin Haenel"
* git config user.email valentin@cs.tu-berlin.de
* Mit @-{-}global@ fügt man diese Optionen der @.gitconfig@ des Benutzers hinzu.
Was passiert wenn ich das nicht mache? (Impact Graph von molif zeigen)

==== Der Index ====

* Der ''index'' (auch ''staging area'' genannt) bietet die Möglichkeit einen zu speichernden Zustand schrittweise aus einzelnen Veränderungen zusammenzusetzen.
* Quellcode kann mit den Kommando @git-add@ dem index hinzugefügt werden.
* Die Option @-{-}patch@ bzw. @-p@ erlaubt es einzelne ''hunks'' zu selektieren.
* Um uns anzeigen zu lassen was sich im index befindet verwenden wir @git diff -{-}cached@.
* Um veränderungen wieder aus dem index in den working tree zurückzuholen (unstage) verwenden wir @git reset HEAD@.

==== Das Repository ====

* Um Veränderungen aus dem Index zu übernehmen verwenden wir @git commit@.
* Dies ruft unseren @EDITOR@ auf und wir können die commit Nachricht eingeben.
* Wollen wir die commit Nachrich direkt auf der Kommandozeile eingeben verwenden wir @git commit -m "NACHRICHT"@
* Um den Index zum umgehen und gleich alle Veränderungen direkt zu übernehmen verwenden wir @git commit -a@
* Wenn wir den working-tree zu einem frühern Zustand aus dem repository zurück setzen wollen verweden wir @git checkout@.

